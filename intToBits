bool* toBits(int num, int numBits){
	bool* bits = new bool[numBits];
	bool* tempBits = new bool[numBits];
	int biggestPowerOfTwos = 2;
	int exponentOfTwos = 1;
	int remainder = num;
	int temp;
	bool first = true;
	bool carry = false;
	while (remainder != 1 && remainder != 0){
		exponentOfTwos = 1;
		biggestPowerOfTwos = 2;
		while (biggestPowerOfTwos <= remainder){
			biggestPowerOfTwos *= 2;
			exponentOfTwos++;
		}
		exponentOfTwos--;
		biggestPowerOfTwos /= 2;
		if (first){
			for (int i = 0; i < numBits; i++){
				bits[i] = false;
			}
			first = false;
			bits[numBits - exponentOfTwos - 1] = bits[numBits - exponentOfTwos - 1] | true;
		}
		else{
			bits[numBits - exponentOfTwos - 1] = bits[numBits - exponentOfTwos - 1] | true;
		}
		remainder -= biggestPowerOfTwos;
	}
	if (remainder == 1){
		bits[numBits - 1] = true;
	}
	else{
		bits[numBits - 1] = false;
	}
	//bool ad = true;
	//bool* done = &ad;
	return bits;
}
